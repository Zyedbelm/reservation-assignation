
import { GameMaster } from '@/hooks/useGameMasters';
import { GMCompetency } from '@/hooks/useGMCompetencies';
import { EventGameMapping } from '@/hooks/useEventGameMappings';
import { Availability } from '@/hooks/useAvailabilities';
import { findMatchingGame } from './unifiedGameMappingService';
import { checkGMAvailabilityConflicts } from './assignmentValidation';

export interface EligibleGM {
  gm: GameMaster;
  competencyLevel: number;
  weight: number;
  availableSlots: string[];
  hasSpecificCompetency: boolean;
}

// Fonction pour v√©rifier la compatibilit√© des cr√©neaux avec am√©lioration de logs
const isTimeSlotCompatible = (availableSlots: string[], eventStart: string, eventEnd: string): boolean => {
  console.log(`‚è∞ [TIME-CHECK] V√©rification cr√©neaux pour ${eventStart}-${eventEnd}`);
  console.log(`üìÖ [TIME-CHECK] Cr√©neaux disponibles: [${availableSlots.join(', ')}]`);
  
  if (!availableSlots || availableSlots.length === 0) {
    console.log(`‚ùå [TIME-CHECK] Aucun cr√©neau disponible`);
    return false;
  }

  // V√©rifier les cr√©neaux d'indisponibilit√©
  if (availableSlots.includes('indisponible-toute-la-journee')) {
    console.log(`‚ùå [TIME-CHECK] GM indisponible toute la journ√©e`);
    return false;
  }

  // Cas sp√©cial : "toute-la-journee" accepte tout
  if (availableSlots.includes('toute-la-journee')) {
    console.log(`‚úÖ [TIME-CHECK] Cr√©neau "toute-la-journee" - Compatible`);
    return true;
  }

  // V√©rification des cr√©neaux horaires sp√©cifiques
  const eventStartMin = timeToMinutes(eventStart);
  const eventEndMin = timeToMinutes(eventEnd);
  console.log(`üïê [TIME-CHECK] √âv√©nement: ${eventStartMin}-${eventEndMin} minutes`);

  for (const slot of availableSlots) {
    if (slot.includes('-')) {
      try {
        const [slotStart, slotEnd] = slot.split('-');
        const slotStartMin = timeToMinutes(slotStart);
        const slotEndMin = timeToMinutes(slotEnd);
        
        console.log(`üïê [TIME-CHECK] Test cr√©neau: ${slot} (${slotStartMin}-${slotEndMin} minutes)`);
        
        // L'√©v√©nement doit s'int√©grer compl√®tement dans le cr√©neau
        if (slotStartMin <= eventStartMin && slotEndMin >= eventEndMin) {
          console.log(`‚úÖ [TIME-CHECK] √âv√©nement s'int√®gre parfaitement dans le cr√©neau: ${slot}`);
          return true;
        } else {
          console.log(`‚ùå [TIME-CHECK] Cr√©neau ${slot} incompatible: ne couvre pas enti√®rement l'√©v√©nement`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è [TIME-CHECK] Erreur v√©rification cr√©neau ${slot}:`, error);
        continue;
      }
    }
  }
  
  console.log(`‚ùå [TIME-CHECK] Aucun cr√©neau compatible trouv√©`);
  return false;
};

const timeToMinutes = (timeStr: string): number => {
  const [hours, minutes] = timeStr.split(':').map(Number);
  return hours * 60 + minutes;
};

// Fonction pour √©valuer l'√©ligibilit√© d'un GM avec logs d√©taill√©s
export const evaluateGMEligibility = async (
  gm: GameMaster,
  eventDate: string,
  eventStartTime: string,
  eventEndTime: string,
  gameId: string | null,
  availabilities: Availability[],
  competencies: GMCompetency[]
): Promise<EligibleGM | null> => {
  console.log(`\nüîç [GM-ELIGIBILITY] ====== √âvaluation ${gm.name} ======`);

  // 1. V√©rifier que le GM est actif
  if (!gm.is_active) {
    console.log(`‚ùå [GM-ELIGIBILITY] ${gm.name} - GM inactif`);
    return null;
  }
  console.log(`‚úÖ [GM-ELIGIBILITY] ${gm.name} - GM actif`);

  // 2. V√©rifier que le GM est disponible dans le syst√®me
  if (!gm.is_available) {
    console.log(`‚ùå [GM-ELIGIBILITY] ${gm.name} - GM marqu√© comme indisponible dans le syst√®me`);
    return null;
  }
  console.log(`‚úÖ [GM-ELIGIBILITY] ${gm.name} - GM disponible dans le syst√®me`);

  // 3. V√©rifier les disponibilit√©s d√©clar√©es
  const gmAvailability = availabilities.find(av => av.gm_id === gm.id && av.date === eventDate);
  if (!gmAvailability) {
    console.log(`‚ùå [GM-ELIGIBILITY] ${gm.name} - Aucune disponibilit√© d√©clar√©e pour le ${eventDate}`);
    return null;
  }
  console.log(`‚úÖ [GM-ELIGIBILITY] ${gm.name} - Disponibilit√© d√©clar√©e trouv√©e`);

  // 4. V√©rifier la compatibilit√© des cr√©neaux
  if (!isTimeSlotCompatible(gmAvailability.time_slots, eventStartTime, eventEndTime)) {
    console.log(`‚ùå [GM-ELIGIBILITY] ${gm.name} - Cr√©neaux horaires incompatibles`);
    return null;
  }
  console.log(`‚úÖ [GM-ELIGIBILITY] ${gm.name} - Cr√©neaux horaires compatibles`);

  // 5. V√©rifier les conflits d'assignation existants
  console.log(`üîç [GM-ELIGIBILITY] ${gm.name} - V√©rification des conflits d'assignation...`);
  const conflictCheck = await checkGMAvailabilityConflicts(
    gm.id,
    eventDate,
    eventStartTime,
    eventEndTime
  );

  if (conflictCheck.hasConflict) {
    console.log(`‚ùå [GM-ELIGIBILITY] ${gm.name} - Conflit d'assignation d√©tect√©:`, conflictCheck.conflicts);
    return null;
  }
  console.log(`‚úÖ [GM-ELIGIBILITY] ${gm.name} - Aucun conflit d'assignation`);

  // 6. V√©rifier les comp√©tences si un jeu sp√©cifique est requis
  let competencyLevel = 1; // Niveau par d√©faut
  let hasSpecificCompetency = false;

  if (gameId) {
    console.log(`üéÆ [GM-ELIGIBILITY] ${gm.name} - V√©rification comp√©tence pour le jeu ID: ${gameId}`);
    const gmCompetency = competencies.find(comp => comp.gm_id === gm.id && comp.game_id === gameId);
    if (gmCompetency && gmCompetency.competency_level >= 1) {
      competencyLevel = gmCompetency.competency_level;
      hasSpecificCompetency = true;
      console.log(`‚úÖ [GM-ELIGIBILITY] ${gm.name} - Comp√©tence niveau ${competencyLevel} valid√©e`);
    } else {
      console.log(`‚ùå [GM-ELIGIBILITY] ${gm.name} - Comp√©tence insuffisante (niveau requis: 1, trouv√©: ${gmCompetency?.competency_level || 0})`);
      return null;
    }
  } else {
    console.log(`‚úÖ [GM-ELIGIBILITY] ${gm.name} - √âv√©nement g√©n√©ral, aucune comp√©tence sp√©cifique requise`);
  }

  console.log(`üéâ [GM-ELIGIBILITY] ${gm.name} - √âLIGIBLE ! (Niveau: ${competencyLevel}, Poids: ${competencyLevel})`);

  return {
    gm,
    competencyLevel,
    weight: competencyLevel, // Le poids = niveau de comp√©tence
    availableSlots: gmAvailability.time_slots,
    hasSpecificCompetency
  };
};

// Fonction de s√©lection al√©atoire pond√©r√©e am√©lior√©e
export const selectGMByWeightedRandom = (eligibleGMs: EligibleGM[]): EligibleGM => {
  console.log(`\nüéØ [WEIGHTED-SELECTION] ====== S√©lection Al√©atoire Pond√©r√©e ======`);
  console.log(`üë• [WEIGHTED-SELECTION] ${eligibleGMs.length} GM(s) √©ligible(s) pour la s√©lection`);
  
  if (eligibleGMs.length === 0) {
    throw new Error('Aucun GM √©ligible pour la s√©lection');
  }

  if (eligibleGMs.length === 1) {
    console.log(`‚úÖ [WEIGHTED-SELECTION] Un seul GM √©ligible: ${eligibleGMs[0].gm.name}`);
    return eligibleGMs[0];
  }

  // Calculer le poids total
  const totalWeight = eligibleGMs.reduce((sum, gm) => sum + gm.weight, 0);
  console.log(`üìä [WEIGHTED-SELECTION] Poids total: ${totalWeight}`);

  // Afficher les candidats avec leurs poids et probabilit√©s
  console.log(`üìã [WEIGHTED-SELECTION] Candidats et leurs chances:`);
  eligibleGMs.forEach(candidate => {
    const percentage = ((candidate.weight / totalWeight) * 100).toFixed(1);
    console.log(`üë§ [WEIGHTED-SELECTION] ${candidate.gm.name}: Poids ${candidate.weight}/${totalWeight} (${percentage}% de chance)`);
  });

  // G√©n√©rer un nombre al√©atoire
  const random = Math.random() * totalWeight;
  console.log(`üé≤ [WEIGHTED-SELECTION] Nombre al√©atoire g√©n√©r√©: ${random.toFixed(3)} / ${totalWeight}`);

  // S√©lectionner le GM
  let cumulativeWeight = 0;
  for (const candidate of eligibleGMs) {
    cumulativeWeight += candidate.weight;
    console.log(`üîç [WEIGHTED-SELECTION] Test ${candidate.gm.name}: seuil cumul√© = ${cumulativeWeight}`);
    if (random <= cumulativeWeight) {
      console.log(`üèÜ [WEIGHTED-SELECTION] GM S√âLECTIONN√â: ${candidate.gm.name} (poids: ${candidate.weight})`);
      return candidate;
    }
  }

  // Failsafe : retourner le dernier GM si quelque chose se passe mal
  console.log(`‚ö†Ô∏è [WEIGHTED-SELECTION] Failsafe activ√©: s√©lection du dernier GM`);
  return eligibleGMs[eligibleGMs.length - 1];
};

// Fonction principale d'assignation simplifi√©e avec logs d√©taill√©s
export const getSimplifiedAssignment = async (
  gameMasters: GameMaster[],
  eventTitle: string,
  eventDate: string,
  eventStartTime: string,
  eventEndTime: string,
  mappings: EventGameMapping[],
  competencies: GMCompetency[],
  availabilities: Availability[]
): Promise<{ selectedGM: EligibleGM | null; eligibleGMs: EligibleGM[]; gameMatch: any }> => {
  console.log('\nüöÄ [SIMPLIFIED-ASSIGNMENT] ========================================');
  console.log('üöÄ [SIMPLIFIED-ASSIGNMENT] D√âMARRAGE NOUVELLE LOGIQUE SIMPLIFI√âE');
  console.log('üöÄ [SIMPLIFIED-ASSIGNMENT] ========================================');
  console.log(`üìã [SIMPLIFIED-ASSIGNMENT] √âv√©nement: "${eventTitle}"`);
  console.log(`üìÖ [SIMPLIFIED-ASSIGNMENT] Date: ${eventDate}`);
  console.log(`‚è∞ [SIMPLIFIED-ASSIGNMENT] Horaire: ${eventStartTime} - ${eventEndTime}`);

  // 1. Identifier le jeu correspondant
  console.log('\nüéÆ [SIMPLIFIED-ASSIGNMENT] === √âTAPE 1: IDENTIFICATION DU JEU ===');
  const gameMatch = await findMatchingGame(eventTitle);
  console.log(`üéÆ [SIMPLIFIED-ASSIGNMENT] Correspondance trouv√©e:`, gameMatch);

  // 2. √âvaluer tous les GMs pour l'√©ligibilit√©
  console.log('\nüë• [SIMPLIFIED-ASSIGNMENT] === √âTAPE 2: √âVALUATION DES GMs ===');
  console.log(`üë• [SIMPLIFIED-ASSIGNMENT] ${gameMasters.length} GM(s) √† √©valuer`);
  
  const eligibilityPromises = gameMasters.map(gm => 
    evaluateGMEligibility(
      gm,
      eventDate,
      eventStartTime,
      eventEndTime,
      gameMatch.gameId,
      availabilities,
      competencies
    )
  );

  const eligibilityResults = await Promise.all(eligibilityPromises);
  const eligibleGMs = eligibilityResults.filter((result): result is EligibleGM => result !== null);

  console.log('\nüìä [SIMPLIFIED-ASSIGNMENT] === √âTAPE 3: R√âSULTATS √âLIGIBILIT√â ===');
  console.log(`üë• [SIMPLIFIED-ASSIGNMENT] GMs √©valu√©s: ${gameMasters.length}`);
  console.log(`‚úÖ [SIMPLIFIED-ASSIGNMENT] GMs √©ligibles: ${eligibleGMs.length}`);
  console.log(`‚ùå [SIMPLIFIED-ASSIGNMENT] GMs non √©ligibles: ${gameMasters.length - eligibleGMs.length}`);

  if (eligibleGMs.length === 0) {
    console.log(`‚ùå [SIMPLIFIED-ASSIGNMENT] √âCHEC: Aucun GM √©ligible trouv√©`);
    console.log('üöÄ [SIMPLIFIED-ASSIGNMENT] ========================================');
    return { selectedGM: null, eligibleGMs: [], gameMatch };
  }

  // 3. S√©lection al√©atoire pond√©r√©e
  console.log('\nüéØ [SIMPLIFIED-ASSIGNMENT] === √âTAPE 4: S√âLECTION FINALE ===');
  const selectedGM = selectGMByWeightedRandom(eligibleGMs);

  console.log('\nüéâ [SIMPLIFIED-ASSIGNMENT] === ASSIGNATION TERMIN√âE ===');
  console.log(`üèÜ [SIMPLIFIED-ASSIGNMENT] GM s√©lectionn√©: ${selectedGM.gm.name}`);
  console.log(`üéØ [SIMPLIFIED-ASSIGNMENT] Niveau de comp√©tence: ${selectedGM.competencyLevel}`);
  console.log(`‚öñÔ∏è [SIMPLIFIED-ASSIGNMENT] Poids: ${selectedGM.weight}`);
  console.log(`üìä [SIMPLIFIED-ASSIGNMENT] √âligibles totaux: ${eligibleGMs.length}`);
  console.log('üöÄ [SIMPLIFIED-ASSIGNMENT] ========================================');

  return { selectedGM, eligibleGMs, gameMatch };
};
