
import { sendNotification } from './centralizedNotificationService';

export const unassignGMFromActivity = async (activityId: string, supabaseClient: any, eventData?: any) => {
  console.log(`üîÑ Unassigning GM from activity: ${activityId}`);
  
  try {
    // R√©cup√©rer l'activit√© avec les infos du GM assign√© AVANT la d√©sassignation
    const { data: activityWithGM, error: fetchError } = await supabaseClient
      .from('activities')
      .select('*, assigned_gm_id')
      .eq('id', activityId)
      .single();

    if (fetchError) {
      console.error('‚ùå Error fetching activity before unassignment:', fetchError);
    }

    // Supprimer les assignations existantes
    const { error: deleteAssignmentError } = await supabaseClient
      .from('event_assignments')
      .delete()
      .eq('activity_id', activityId);

    if (deleteAssignmentError) {
      console.error('‚ùå Error deleting assignments:', deleteAssignmentError);
    } else {
      console.log('‚úÖ Assignments deleted successfully');
    }

    // Mettre √† jour l'activit√© pour enlever l'assignation
    const { error: updateError } = await supabaseClient
      .from('activities')
      .update({
        assigned_gm_id: null,
        is_assigned: false,
        assignment_date: null,
        assignment_score: null,
        updated_at: new Date().toISOString()
      })
      .eq('id', activityId);

    if (updateError) {
      console.error('‚ùå Error updating activity:', updateError);
    } else {
      console.log('‚úÖ Activity unassigned successfully');
    }

    // Envoyer une notification au GM si il √©tait assign√© et qu'on a les donn√©es de l'√©v√©nement
    if (activityWithGM?.assigned_gm_id && eventData) {
      console.log('üìß Sending cancellation notification due to unassignment...');
      
      // R√©cup√©rer les infos du GM
      const { data: gmData } = await supabaseClient
        .from('game_masters')
        .select('name, email')
        .eq('id', activityWithGM.assigned_gm_id)
        .single();

      if (gmData?.email) {
        await sendNotification({
          gmEmail: gmData.email,
          gmName: gmData.name,
          changeType: 'cancelled',
          eventData: activityWithGM
        });
      }
    }

  } catch (error) {
    console.error('üí• Error in unassignGMFromActivity:', error);
  }
};
